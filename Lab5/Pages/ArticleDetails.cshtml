@page "{id:int?}"
@model Lab5.Pages.ArticleDetailsModel
@{
    // ViewData["Title"] устанавливается в PageModel
}

@if (Model.CurrentArticle != null)
{
    <style>
        .article-detail-container {
            max-width: 800px; /* Ограничиваем ширину контента статьи */
            margin: 20px auto; /* Центрируем */
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        }

        .back-button-container {
            margin-bottom: 25px;
        }

        .back-button {
            display: inline-flex; /* Для выравнивания иконки и текста */
            align-items: center;
            justify-content: center;
            width: 40px; /* Фиксированная ширина кнопки */
            height: 40px; /* Фиксированная высота кнопки */
            border: 1px solid #ccc;
            background-color: #f8f9fa;
            color: #333;
            text-decoration: none;
            border-radius: 5px;
            font-size: 1.2rem; /* Размер стрелки */
            transition: background-color 0.2s ease;
        }

            .back-button:hover {
                background-color: #e9ecef;
                color: #333;
            }

        .article-header-image {
            width: 100%;
            max-height: 400px; /* Ограничение по высоте для больших картинок */
            object-fit: cover; /* Масштабирование с сохранением пропорций и обрезкой */
            border-radius: 6px;
            margin-bottom: 20px;
        }

        .article-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            color: #6c757d; /* text-muted */
            font-size: 0.9rem;
        }

            .article-meta .publish-date {
                /* Стили для даты, если нужны */
            }

            .article-meta .bookmark-icon img {
                width: 18px; /* Размер иконки закладки */
                height: auto;
                cursor: pointer; /* Для будущей интерактивности */
            }

        .article-title {
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 25px;
            line-height: 1.3;
        }

        .article-content p {
            line-height: 1.7;
            margin-bottom: 1.2em;
            font-size: 1rem;
            text-align: justify; 
        }

        .article-content h3 {
            font-size: 1.4rem;
            font-weight: 600;
            margin-top: 1.8em;
            margin-bottom: 0.8em;
        }
        /* Стили для других тегов, если они будут в контенте (ul, ol, blockquote, etc.) */
        /* Добавь стили для strong, если нужно выделить полужирные подзаголовки */
        .article-content strong {
            font-weight: 600; /* Или bold, если предпочитаешь */
            display: block; /* Чтобы <br> после него работал как новый абзац */
            margin-top: 0.5em; /* Небольшой отступ сверху для выделенных строк */
        }

    </style>

    <div class="article-detail-container">
        <div class="back-button-container">
            <a href="javascript:history.back()" class="back-button" title="Назад">
                ←
            </a>
        </div>

        @if (!string.IsNullOrEmpty(Model.CurrentArticle.ImagePath))
        {
            <img src="@Model.CurrentArticle.ImagePath" alt="Обложка статьи: @Model.CurrentArticle.Title" class="article-header-image">
        }

        <div class="article-meta">
            <span class="publish-date">@Model.CurrentArticle.PublishDate.ToString("dd.MM.yyyy")</span>

            @* --- НАЧАЛО: Обновленный блок для иконки закладки --- *@
            <span class="bookmark-icon">
                @if (User.Identity != null && User.Identity.IsAuthenticated)
                {
                    @* Для авторизованных пользователей - форма для отправки на сервер *@
                    <form method="post" asp-page-handler="ToggleFavoriteArticle" style="display: inline;">
                        <input type="hidden" name="articleId" value="@Model.CurrentArticle.Id" />
                        @* CSRF токен будет добавлен автоматически ASP.NET Core для POST форм *@
                        <button type="submit" class="btn btn-link p-0 border-0 align-baseline" title="@(Model.IsCurrentArticleFavorite ? "Убрать из закладок" : "Добавить в закладки")">
                            <img src="@(Model.IsCurrentArticleFavorite ? "/images/bookmark_on.svg" : "/images/bookmark_off.svg")"
                                 alt="@(Model.IsCurrentArticleFavorite ? "В закладках" : "Добавить в закладки")"
                                 style="width: 18px; height: auto; cursor: pointer;">
                        </button>
                    </form>
                }
                else
                {
                    @* Для неавторизованных пользователей - картинка с JS-обработчиком для модального окна *@
                    <img src="~/images/bookmark_off.svg" alt="Добавить в закладки"
                         class="require-auth-action" data-action="bookmarkArticle"
                         style="width: 18px; height: auto; cursor: pointer;"
                         title="Добавить в закладки (требуется вход)">
                }
            </span>
            @* --- КОНЕЦ --- *@
        </div>

        <h1 class="article-title">@Model.CurrentArticle.Title</h1>

        <div class="article-content">
            @Html.Raw(Model.CurrentArticle.Content)
        </div>

        @* Секция комментариев была здесь, теперь ее нет *@
    </div>
}
else
{
    <div class="alert alert-warning">Статья не найдена.</div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const favoriteStateJustChanged = @(Model.FavoriteStateChanged.ToString().ToLower() ?? "false");

            if (favoriteStateJustChanged) {
                console.log('Favorite state just changed. Attempting history manipulation.'); // Для отладки

                // Сохраняем текущий URL, чтобы убедиться, что мы не уходим со страницы
                const currentPageUrl = window.location.href;

                // Попытка "проскочить" предыдущую запись в истории для этого же URL
                // Это экспериментальный подход.
                // Сначала "возвращаемся" на предыдущую запись (которая может быть "грязной")
                window.history.go(-1);

                // А затем немедленно "идем вперед" на текущую, уже "чистую" страницу.
                // Используем setTimeout, чтобы дать history.go(-1) шанс сработать.
                setTimeout(function() {
                    // Проверяем, что мы все еще на той же странице, на всякий случай
                    if (window.location.href.startsWith(currentPageUrl.split('#')[0].split('?')[0])) { // Сравниваем без якоря и query string для надежности
                        window.history.go(1);
                        console.log('Attempted to go forward in history.');
                    } else {
                        // Если URL изменился (что не должно произойти при go(-1) на тот же URL),
                        // возможно, стоит вернуть пользователя
                        // window.location.href = currentPageUrl; // Это может вызвать цикл, будь осторожен
                        console.warn('URL changed after history.go(-1), forward step skipped.');
                    }
                }, 0); // Минимальная задержка

                // window.history.replaceState все еще может быть полезен, но попробуем без него сначала
                // if (window.history.replaceState) {
                //     const cleanUrl = window.location.pathname + window.location.search;
                //     window.history.replaceState({ pageState: "favorite_toggled_v2" }, document.title, cleanUrl);
                //     console.log('History state replaced (v2).');
                // }
            }

            // --- Остальной ваш JavaScript для модального окна и т.д. ---
            const isAuthenticated = @(User.Identity?.IsAuthenticated.ToString().ToLower() ?? "false");
            const authModalElement = document.getElementById('authRequiredModal');
            let authModal = authModalElement ? new bootstrap.Modal(authModalElement) : null;

            document.querySelectorAll('img.require-auth-action[data-action="bookmarkArticle"]').forEach(element => {
                element.addEventListener('click', function (event) {
                    if (!isAuthenticated) {
                        event.preventDefault();
                        event.stopPropagation();
                        if (authModal) { authModal.show(); } else { alert("Требуется авторизация."); }
                    }
                });
            });
        });
    </script>

    @* <partial name="_ValidationScriptsPartial" /> *@
    @if (ViewContext.HttpContext.Items["AuthModalRendered"] == null)
    {
        <partial name="_AuthRequiredModalPartial" />
        ViewContext.HttpContext.Items["AuthModalRendered"] = true;
    }
}