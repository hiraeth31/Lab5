@page
@model Lab5.Pages.PodcastsModel
@{
    ViewData["Title"] = "Подкасты";
}

@* Добавляем стили, специфичные для этой страницы *@
<style>
    /* Стили для секции поиска (можно вынести в site.css, если еще не там) */
    .search-section {
        background-color: #F8DFAC;
        padding: 40px 0;
    }

    .search-input-container {
        max-width: 600px;
        margin: 0 auto;
        position: relative;
    }

    .search-icon {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        width: 24px;
        height: 24px;
        opacity: 0.7;
        pointer-events: none;
    }

    /* Стили для элемента подкаста */
    .podcast-item {
        display: flex; /* Используем flexbox для расположения картинки и контента */
        align-items: center; /* Выравниваем элементы по центру по вертикали */
        background-color: #fff; /* Белый фон */
        padding: 20px; /* Внутренние отступы */
        margin-bottom: 25px; /* Отступ снизу между подкастами */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08); /* Легкая тень */
        border-radius: 8px; /* Небольшое скругление углов */
        gap: 20px; /* Пространство между картинкой и контентом */
    }

    .podcast-image img {
        max-width: 250px; /* Ограничиваем ширину картинки */
        height: auto; /* Позволяем высоте подстраиваться */
        display: block; /* Убираем лишние отступы под картинкой */
        border-radius: 4px; /* Слегка скругляем углы картинки */
    }

    .podcast-content {
        flex-grow: 1; /* Позволяем блоку с контентом занять оставшееся место */
        position: relative; /* Для позиционирования иконки закладки */
        min-width: 0; /* Предотвращает "выталкивание" элементов при сужении */
    }

    .podcast-title {
        font-size: 1.2rem; /* Размер заголовка */
        font-weight: 600; /* Полужирный шрифт */
        margin-bottom: 15px; /* Отступ под заголовком */
        padding-right: 30px; /* Добавляем место справа, чтобы текст не заходил под иконку закладки */
    }

    .podcast-bookmark {
        position: absolute; /* Абсолютное позиционирование */
        top: 0; /* Сверху */
        right: 0; /* Справа */
        width: 24px; /* Размер иконки */
        height: 24px;
        cursor: pointer; /* Показываем, что можно нажать */
        /* Можно использовать background-image или SVG */
    }

    /* Стили для плеера */
    .podcast-player {
        display: flex;
        align-items: center;
        gap: 10px; /* Расстояние между элементами плеера */
        width: 100%; /* Занимает всю доступную ширину */
    }

    .play-button {
        background: none;
        border: none;
        padding: 0;
        cursor: pointer;
        font-size: 1.8rem; /* Размер иконки play */
        color: #333; /* Цвет иконки */
        line-height: 1; /* Убираем лишнюю высоту строки */
        flex-shrink: 0; /* Не сжимаем кнопку */
    }
        /* Можно использовать SVG или иконочный шрифт для кнопки play */
        .play-button::before {
            /* Для примера используем простой символ. Лучше SVG или иконку */
            content: '▶';
        }
    /* Если плеер активен, можно менять иконку на паузу */
    /* .podcast-player.playing .play-button::before { content: '❚❚'; } */


    .progress-bar-container {
        flex-grow: 1; /* Занимает все доступное пространство */
        height: 6px; /* Высота полосы прогресса */
        background-color: #e9ecef; /* Цвет фона полосы */
        border-radius: 3px;
        cursor: pointer;
        position: relative; /* Для отображения текущего прогресса */
        overflow: hidden; /* Скрываем выходящий за границы прогресс */
    }

    .progress-bar {
        height: 100%;
        width: 0%; /* Начальная ширина прогресса (будет меняться JS) */
        background-color: #4B848B; /* Цвет заполненной части (из вашего CSS) */
        border-radius: 3px;
        position: absolute;
        left: 0;
        top: 0;
    }

    .time-display {
        font-size: 0.85rem;
        color: #6c757d; /* text-muted цвет */
        white-space: nowrap; /* Запрещаем перенос времени */
        flex-shrink: 0; /* Не сжимаем блок времени */
    }

    .current-time {
        margin-right: 5px; /* Небольшой отступ справа от текущего времени */
    }

</style>

<!-- Секция Поиска (такая же, как на странице Статей) -->
<div class="search-section text-center mb-5">
    <div class="container">
        <h2 class="mb-4 fw-bold">Что вас интересует?</h2>
        <div class="search-input-container">
            <input type="text" class="form-control form-control-lg" placeholder="Поиск..">
            @* ВАЖНО: Укажите правильный путь к иконке поиска *@
            <img src="~/images/search.svg" alt="Поиск" class="search-icon" />
        </div>
    </div>
</div>

<!-- Список Подкастов -->
<div class="container">

    @* В реальном приложении здесь был бы цикл @foreach (var podcast in Model.Podcasts) *@

    <!-- Пример одного элемента подкаста -->
    <div class="podcast-item">
        <div class="podcast-image">
            <img src="~/images/podcast_1.png" alt="Обложка подкаста Виды Отдыха">
        </div>
        <div class="podcast-content">
            <h5 class="podcast-title">Виды отдыха, которые нужно научиться различать</h5>

            @* ---> НАЧАЛО: Изменения для иконки закладок <--- *@
            @* Добавляем класс 'require-auth-action' для JS и data-action для идентификации *@
            <img src="~/images/bookmark_off.svg" alt="Добавить в закладки"
                 class="podcast-bookmark require-auth-action" data-action="bookmark" />
            @* ---> КОНЕЦ <--- *@

            <div class="podcast-player">
                @* ---> НАЧАЛО: Изменения для кнопки Play <--- *@
                @* Заменяем символ на img и добавляем класс 'require-auth-action' *@
                <img src="~/images/play.svg" alt="Воспроизвести" style="width: 24px; height: 24px; vertical-align: middle;" class="play-button require-auth-action" data-action="play"> @* Укажи нужный размер *@
                @* ---> КОНЕЦ <--- *@
                <span class="time-display current-time">00:00</span>
                <div class="progress-bar-container" role="slider" aria-valuenow="0" aria-valuemin="0" aria-valuemax="313" aria-label="Прогресс воспроизведения">
                    <div class="progress-bar"></div>
                </div>
                <span class="time-display total-duration">5:13 мин</span>
            </div>
        </div>
    </div>

    @* Добавь другие podcast-item аналогично *@

    @* ---> НАЧАЛО: HTML для модального окна авторизации (с изменениями) <--- *@
    <div class="modal fade" id="authRequiredModal" tabindex="-1"
         aria-labelledby="authRequiredModalLabel" aria-hidden="true"
         data-bs-backdrop="static" @* <--- Добавлено *@
         data-bs-keyboard="false">
        @* <--- Добавлено *@
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="authRequiredModalLabel">Требуется авторизация</h5>
                    @* Эта кнопка (крестик) по-прежнему будет работать *@
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    Авторизируйтесь через Google, чтобы разблокировать больше возможностей.
                </div>
                <div class="modal-footer justify-content-center">
                    <a asp-page="/Login" class="btn login-btn px-4">Вход</a>
                </div>
            </div>
        </div>
    </div>
    @* ---> КОНЕЦ: HTML для модального окна авторизации <--- *@

</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Получаем статус аутентификации из Razor
            const isAuthenticated = @(User.Identity?.IsAuthenticated.ToString().ToLower() ?? "false");

            // Находим все интерактивные элементы (Play и Bookmark)
            const interactiveElements = document.querySelectorAll('.require-auth-action');

            // Модальное окно (если нужно)
            const authModalElement = document.getElementById('authRequiredModal');
            let authModal = authModalElement ? new bootstrap.Modal(authModalElement) : null;
            if (!authModal && !isAuthenticated) {
                 console.error("Элемент модального окна #authRequiredModal не найден, но пользователь не авторизован!");
            }

            // Определяем пути к иконкам один раз
            const icons = {
                play: '/images/play.svg',
                pause: '/images/pause.svg',
                bookmark_off: '/images/bookmark_off.svg',
                bookmark_on: '/images/bookmark_on.svg'
            };

            // Добавляем обработчик клика на каждый интерактивный элемент
            interactiveElements.forEach(element => {
                element.addEventListener('click', function (event) {
                    const clickedElement = event.currentTarget; // Элемент, по которому кликнули (<img>)
                    const action = clickedElement.getAttribute('data-action'); // 'play' или 'bookmark'

                    // Если пользователь НЕ аутентифицирован
                    if (!isAuthenticated) {
                        event.preventDefault();
                        event.stopPropagation();
                        if (authModal) {
                            authModal.show();
                        }
                        console.log(`Действие "${action}" требует авторизации.`);
                    }
                    // ---> НАЧАЛО: Логика для АВТОРИЗОВАННОГО пользователя <---
                    else {
                        // Предотвращаем стандартное поведение, если это необходимо
                        // event.preventDefault(); // Раскомментируй, если нужно остановить навигацию или др.

                        console.log(`Авторизованный пользователь выполняет действие: "${action}"`);

                        // Логика для кнопки Play/Pause
                        if (action === 'play') {
                            // Проверяем текущий src и меняем на противоположный
                            if (clickedElement.src.endsWith(icons.play)) {
                                clickedElement.src = icons.pause;
                                clickedElement.alt = 'Пауза';
                                // Здесь можно добавить реальную логику запуска плеера
                                console.log('Подкаст запущен (симуляция)');
                            } else if (clickedElement.src.endsWith(icons.pause)) {
                                clickedElement.src = icons.play;
                                clickedElement.alt = 'Воспроизвести';
                                // Здесь можно добавить реальную логику остановки плеера
                                console.log('Подкаст остановлен (симуляция)');
                            } else {
                                console.warn('Не удалось определить состояние кнопки Play/Pause по src:', clickedElement.src);
                            }
                        }
                        // Логика для кнопки Bookmark On/Off
                        else if (action === 'bookmark') {
                             // Проверяем текущий src и меняем на противоположный
                            if (clickedElement.src.endsWith(icons.bookmark_off)) {
                                clickedElement.src = icons.bookmark_on;
                                clickedElement.alt = 'Убрать из закладок';
                                // Здесь можно добавить реальную логику добавления в закладки (например, AJAX-запрос на сервер)
                                console.log('Добавлено в закладки (симуляция)');
                            } else if (clickedElement.src.endsWith(icons.bookmark_on)) {
                                clickedElement.src = icons.bookmark_off;
                                clickedElement.alt = 'Добавить в закладки';
                                // Здесь можно добавить реальную логику удаления из закладок (например, AJAX-запрос на сервер)
                                console.log('Удалено из закладок (симуляция)');
                            } else {
                                console.warn('Не удалось определить состояние кнопки Bookmark по src:', clickedElement.src);
                            }
                        }
                    }
                    // ---> КОНЕЦ: Логика для АВТОРИЗОВАННОГО пользователя <---
                });
            });
        });
    </script>
}