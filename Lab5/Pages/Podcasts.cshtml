@page
@model Lab5.Pages.PodcastsModel
@{
    ViewData["Title"] = "Подкасты";
}

@* Добавляем стили, специфичные для этой страницы *@
<style>
    /* Стили для секции поиска (можно вынести в site.css, если еще не там) */
    .search-section {
        background-color: #F8DFAC;
        padding: 40px 0;
    }

    .search-input-container {
        max-width: 600px;
        margin: 0 auto;
        position: relative;
    }

    .search-icon {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        width: 24px;
        height: 24px;
        opacity: 0.7;
        pointer-events: none;
    }

    /* Стили для элемента подкаста */
    .podcast-item {
        display: flex; /* Используем flexbox для расположения картинки и контента */
        align-items: center; /* Выравниваем элементы по центру по вертикали */
        background-color: #fff; /* Белый фон */
        padding: 20px; /* Внутренние отступы */
        margin-bottom: 25px; /* Отступ снизу между подкастами */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08); /* Легкая тень */
        border-radius: 8px; /* Небольшое скругление углов */
        gap: 20px; /* Пространство между картинкой и контентом */
    }

    .podcast-image img {
        max-width: 250px; /* Ограничиваем ширину картинки */
        height: auto; /* Позволяем высоте подстраиваться */
        display: block; /* Убираем лишние отступы под картинкой */
        border-radius: 4px; /* Слегка скругляем углы картинки */
    }

    .podcast-content {
        flex-grow: 1; /* Позволяем блоку с контентом занять оставшееся место */
        position: relative; /* Для позиционирования иконки закладки */
        min-width: 0; /* Предотвращает "выталкивание" элементов при сужении */
    }

    .podcast-title {
        font-size: 1.2rem; /* Размер заголовка */
        font-weight: 600; /* Полужирный шрифт */
        margin-bottom: 15px; /* Отступ под заголовком */
        padding-right: 30px; /* Добавляем место справа, чтобы текст не заходил под иконку закладки */
    }

    .podcast-bookmark {
        position: absolute; /* Абсолютное позиционирование */
        top: 0; /* Сверху */
        right: 0; /* Справа */
        width: 24px; /* Размер иконки */
        height: 24px;
        cursor: pointer; /* Показываем, что можно нажать */
        /* Можно использовать background-image или SVG */
    }

    /* Стили для плеера */
    .podcast-player {
        display: flex;
        align-items: center;
        gap: 10px; /* Расстояние между элементами плеера */
        width: 100%; /* Занимает всю доступную ширину */
    }

    .play-button {
        background: none;
        border: none;
        padding: 0;
        cursor: pointer;
        font-size: 1.8rem; /* Размер иконки play */
        color: #333; /* Цвет иконки */
        line-height: 1; /* Убираем лишнюю высоту строки */
        flex-shrink: 0; /* Не сжимаем кнопку */
    }
        /* Можно использовать SVG или иконочный шрифт для кнопки play */
        .play-button::before {
            /* Для примера используем простой символ. Лучше SVG или иконку */
            content: '▶';
        }
    /* Если плеер активен, можно менять иконку на паузу */
    /* .podcast-player.playing .play-button::before { content: '❚❚'; } */


    .progress-bar-container {
        flex-grow: 1; /* Занимает все доступное пространство */
        height: 6px; /* Высота полосы прогресса */
        background-color: #e9ecef; /* Цвет фона полосы */
        border-radius: 3px;
        cursor: pointer;
        position: relative; /* Для отображения текущего прогресса */
        overflow: hidden; /* Скрываем выходящий за границы прогресс */
    }

    .progress-bar {
        height: 100%;
        width: 0%; /* Начальная ширина прогресса (будет меняться JS) */
        background-color: #4B848B; /* Цвет заполненной части (из вашего CSS) */
        border-radius: 3px;
        position: absolute;
        left: 0;
        top: 0;
    }

    .time-display {
        font-size: 0.85rem;
        color: #6c757d; /* text-muted цвет */
        white-space: nowrap; /* Запрещаем перенос времени */
        flex-shrink: 0; /* Не сжимаем блок времени */
    }

    .current-time {
        margin-right: 5px; /* Небольшой отступ справа от текущего времени */
    }

    .podcast-bookmark-icon-form { /* Стиль для формы иконки у подкаста */
        position: absolute;
        top: 0px;
        right: 0px;
    }

        .podcast-bookmark-icon-form button {
            background: none;
            border: none;
            padding: 0;
            cursor: pointer;
            line-height: 1;
        }

            .podcast-bookmark-icon-form button img {
                width: 24px; /* Размер как у тебя был для .podcast-bookmark */
                height: auto;
                display: block;
            }

    .podcast-bookmark-icon-wrapper { /* Если нужно для позиционирования */
        position: absolute;
        top: 0px;
        right: 0px;
    }

    .podcast-bookmark-icon-form { /* Если используется */
        display: inline; /* Чтобы форма не занимала всю ширину */
    }

        .podcast-bookmark-icon-form button img,
        .podcast-bookmark-icon-wrapper > img.require-auth-action { /* Стиль для обеих картинок */
            width: 24px; /* Или твой размер */
            height: auto;
            display: block;
        }


    .podcast-bookmark-wrapper {
        position: absolute;
        top: 0px; /* Или твои значения отступа */
        right: 0px; /* Или твои значения отступа */
    }

        /* Стили для формы, если она используется (для авторизованных) */
        .podcast-bookmark-wrapper form {
            display: inline; /* Чтобы форма не занимала лишнего места */
        }

        /* Общие стили для картинки-иконки, будь то в кнопке или просто img */
        .podcast-bookmark-wrapper button img,
        .podcast-bookmark-wrapper > img.require-auth-action {
            width: 24px; /* Размер иконки */
            height: auto;
            display: block;
            cursor: pointer;
        }

        /* Стили для кнопки внутри формы, чтобы она выглядела как просто картинка */
        .podcast-bookmark-wrapper button.btn-reset {
            background: none;
            border: none;
            padding: 0;
            margin: 0;
            line-height: 1; /* Убрать лишнюю высоту */
        }

</style>

<!-- Секция Поиска (такая же, как на странице Статей) -->
<div class="search-section text-center mb-5">
    <div class="container">
        <h2 class="mb-4 fw-bold">Что будете слушать сегодня?</h2>
        <div class="search-input-container">
            @* <input type="text" class="form-control form-control-lg" placeholder="Поиск.."> *@
            @* ВАЖНО: Укажите правильный путь к иконке поиска *@
            @* <img src="~/images/search.svg" alt="Поиск" class="search-icon" /> *@
        </div>
    </div>
</div>

<!-- Список Подкастов -->
<div class="container mt-4">
    @if (Model.Podcasts != null && Model.Podcasts.Any())
    {
        @foreach (var podcast in Model.Podcasts)
        {
            <div class="podcast-item">
                <div class="podcast-image">
                    <img src="@podcast.ImagePath" alt="Обложка подкаста: @podcast.Title">
                </div>
                <div class="podcast-content">
                    <h5 class="podcast-title">@podcast.Title</h5>

                    @* ---> НАЧАЛО: ИЗМЕНЕННЫЙ БЛОК ДЛЯ ИКОНКИ ИЗБРАННОГО ПОДКАСТА <--- *@
                    <div class="podcast-bookmark-wrapper">
                        @if (User.Identity != null && User.Identity.IsAuthenticated)
                        {
                            @* Для авторизованных - форма *@
                            <form method="post" asp-page-handler="ToggleFavoritePodcast">
                                <input type="hidden" name="podcastId" value="@podcast.Id" />
                                <input type="hidden" name="returnUrl" value="@Url.Page("/Podcasts")" />
                                <button type="submit" class="btn-reset" title="@(podcast.IsFavorite ? "Убрать из закладок" : "Добавить в закладки")">
                                    <img src="@(podcast.IsFavorite ? "/images/bookmark_on.svg" : "/images/bookmark_off.svg")"
                                         alt="@(podcast.IsFavorite ? "В закладках" : "Добавить в закладки")">
                                </button>
                            </form>
                        }
                        else
                        {
                            @* Для неавторизованных - просто картинка с JS-обработчиком *@
                            <img src="~/images/bookmark_off.svg" alt="Добавить в закладки"
                                 class="require-auth-action"
                                 data-action="bookmarkPodcast_@podcast.Id" @* Уникальный data-action, если их много *@
                                 title="Добавить в закладки (требуется вход)">
                        }
                    </div>
                    @* ---> КОНЕЦ <--- *@

                    <div class="podcast-player">
                        <span class="require-auth-action" data-action="playPodcast_@podcast.Id" aria-label="Воспроизвести">
                            <img src="~/images/play.svg" alt="Воспроизвести" style="width: 24px; height: 24px; vertical-align: middle;">
                        </span>
                        <span class="time-display current-time">00:00</span>
                        <div class="progress-bar-container"> <div class="progress-bar"></div> </div>
                        <span class="time-display total-duration">@podcast.Duration</span>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>Подкастов пока нет.</p>
    }
</div>

@* Модальное окно авторизации (если еще не в _Layout.cshtml) *@
@if (ViewContext.HttpContext.Items["AuthModalRendered"] == null)
{
    <partial name="_AuthRequiredModalPartial" />
    ViewContext.HttpContext.Items["AuthModalRendered"] = true;
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const isAuthenticated = @(User.Identity?.IsAuthenticated.ToString().ToLower() ?? "false");
            const authModalElement = document.getElementById('authRequiredModal');
            let authModal = authModalElement ? new bootstrap.Modal(authModalElement) : null;

            // Обработка кликов на элементы, требующие авторизации
            document.querySelectorAll('.require-auth-action').forEach(element => {
                element.addEventListener('click', function (event) {
                    const action = event.currentTarget.getAttribute('data-action');

                    if (!isAuthenticated) {
                        // Предотвращаем действие по умолчанию только если это не кнопка отправки формы
                        // (хотя для img это не так важно, но для единообразия)
                        event.preventDefault();
                        event.stopPropagation(); // Останавливаем всплытие, чтобы не сработали другие обработчики

                        if (authModal) {
                            authModal.show();
                        } else {
                            alert("Для этого действия требуется авторизация.");
                            console.error("Элемент модального окна #authRequiredModal не найден!");
                        }
                        // console.log(`Действие "${action}" требует авторизации.`);
                    } else {
                        // Если пользователь авторизован, но это элемент .require-auth-action,
                        // который НЕ является формой (как иконка закладки для НЕавторизованных,
                        // или кнопка Play), то здесь обрабатываем его логику.
                        // Для иконки закладки авторизованного пользователя логика теперь в форме.
                        if (action && action.startsWith('playPodcast')) {
                            const img = this.querySelector('img'); // `this` здесь это кнопка .play-button
                            if (img) {
                                if (img.src.includes('play.svg')) {
                                    img.src = '/images/pause.svg'; img.alt = 'Пауза';
                                } else {
                                    img.src = '/images/play.svg'; img.alt = 'Воспроизвести';
                                }
                            }
                        }
                    }
                });
            });

            // Логика "хака" для истории после изменения избранного подкаста
            const favoritePodcastStateJustChanged = @(Model.FavoritePodcastStateChanged.ToString().ToLower() ?? "false");
            if (favoritePodcastStateJustChanged) {
                console.log('Favorite podcast state just changed. Attempting history manipulation.');
                const currentPageUrl = window.location.href;
                window.history.go(-1);
                setTimeout(function() {
                    if (window.location.href.startsWith(currentPageUrl.split('#')[0].split('?')[0])) {
                        window.history.go(1);
                        console.log('Attempted to go forward in history for podcast page.');
                    } else {
                        console.warn('URL changed after history.go(-1) on podcast page, forward step skipped.');
                    }
                }, 0);
            }
        });
    </script>
}